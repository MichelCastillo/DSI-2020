package com.dsi.builder.front;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

import com.dsi.builder.back.*;
import com.dsi.builder.back.business.Estado;
import com.dsi.builder.back.business.Factura;
import com.dsi.builder.back.business.GestorReportesDeTiemposEnPedido;
import com.dsi.builder.back.business.HistorialEstado;
import com.dsi.builder.back.business.Mesa;
import com.dsi.builder.back.business.Pedido;
import com.dsi.builder.back.business.Piso;
import com.dsi.builder.back.business.Seccion;
import com.dsi.builder.back.business.Sector;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;


/*
 *

To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Diego Delgado
 */
public class reportesEnTiempoDePedido extends javax.swing.JFrame {

    /**
     * Creates new form reportesEnTiempoDePedido
     */
    public reportesEnTiempoDePedido() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        CheckCancelado = new javax.swing.JCheckBox();
        TxtFechaInicio = new javax.swing.JTextField();
        TxtFechaFin = new javax.swing.JTextField();
        CheckNotificado = new javax.swing.JCheckBox();
        CheckEntregado = new javax.swing.JCheckBox();
        CheckPendientePreparacion = new javax.swing.JCheckBox();
        CheckEnPreparacion = new javax.swing.JCheckBox();
        CheckListoParaServir = new javax.swing.JCheckBox();
        CheckPlantaBaja = new javax.swing.JCheckBox();
        CheckPrimerPiso = new javax.swing.JCheckBox();
        CheckSegundoPiso = new javax.swing.JCheckBox();
        BtnVisualizarSectorPiso = new javax.swing.JButton();
        BtnTotalizarSector = new javax.swing.JButton();
        BtnTotalizarPiso = new javax.swing.JButton();
        BtnSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CheckCancelado.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckCancelado.setForeground(new java.awt.Color(255, 255, 255));
        CheckCancelado.setSelected(true);
        CheckCancelado.setText("Cancelado");
        CheckCancelado.setAutoscrolls(true);
        CheckCancelado.setOpaque(false);
        CheckCancelado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckCanceladoActionPerformed(evt);
            }
        });
        getContentPane().add(CheckCancelado, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, -1, -1));

        TxtFechaInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtFechaInicioActionPerformed(evt);
            }
        });
        getContentPane().add(TxtFechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 150, 30));

        TxtFechaFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtFechaFinActionPerformed(evt);
            }
        });
        getContentPane().add(TxtFechaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 150, 30));

        CheckNotificado.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckNotificado.setForeground(new java.awt.Color(255, 255, 255));
        CheckNotificado.setSelected(true);
        CheckNotificado.setText("Notificado");
        CheckNotificado.setOpaque(false);
        CheckNotificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckNotificadoActionPerformed(evt);
            }
        });
        getContentPane().add(CheckNotificado, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 240, -1, -1));

        CheckEntregado.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckEntregado.setForeground(new java.awt.Color(255, 255, 255));
        CheckEntregado.setSelected(true);
        CheckEntregado.setText("Entregado");
        CheckEntregado.setToolTipText("");
        CheckEntregado.setOpaque(false);
        CheckEntregado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckEntregadoActionPerformed(evt);
            }
        });
        getContentPane().add(CheckEntregado, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, -1, -1));

        CheckPendientePreparacion.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckPendientePreparacion.setForeground(new java.awt.Color(255, 255, 255));
        CheckPendientePreparacion.setSelected(true);
        CheckPendientePreparacion.setText("Pendiente Preparación");
        CheckPendientePreparacion.setActionCommand("");
        CheckPendientePreparacion.setOpaque(false);
        CheckPendientePreparacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckPendientePreparacionActionPerformed(evt);
            }
        });
        getContentPane().add(CheckPendientePreparacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 300, 200, -1));

        CheckEnPreparacion.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckEnPreparacion.setForeground(new java.awt.Color(255, 255, 255));
        CheckEnPreparacion.setSelected(true);
        CheckEnPreparacion.setText("En Preparación");
        CheckEnPreparacion.setOpaque(false);
        CheckEnPreparacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckEnPreparacionActionPerformed(evt);
            }
        });
        getContentPane().add(CheckEnPreparacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 330, -1, -1));

        CheckListoParaServir.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckListoParaServir.setForeground(new java.awt.Color(255, 255, 255));
        CheckListoParaServir.setSelected(true);
        CheckListoParaServir.setText("Listo Para Servir");
        CheckListoParaServir.setToolTipText("");
        CheckListoParaServir.setOpaque(false);
        CheckListoParaServir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckListoParaServirActionPerformed(evt);
            }
        });
        getContentPane().add(CheckListoParaServir, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 360, -1, -1));

        CheckPlantaBaja.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckPlantaBaja.setForeground(new java.awt.Color(255, 255, 255));
        CheckPlantaBaja.setSelected(true);
        CheckPlantaBaja.setText("Planta Baja");
        CheckPlantaBaja.setOpaque(false);
        CheckPlantaBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckPlantaBajaActionPerformed(evt);
            }
        });
        getContentPane().add(CheckPlantaBaja, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 210, -1, -1));

        CheckPrimerPiso.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckPrimerPiso.setForeground(new java.awt.Color(255, 255, 255));
        CheckPrimerPiso.setSelected(true);
        CheckPrimerPiso.setText("Primer Piso");
        CheckPrimerPiso.setOpaque(false);
        CheckPrimerPiso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckPrimerPisoActionPerformed(evt);
            }
        });
        getContentPane().add(CheckPrimerPiso, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 240, -1, -1));

        CheckSegundoPiso.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CheckSegundoPiso.setForeground(new java.awt.Color(255, 255, 255));
        CheckSegundoPiso.setSelected(true);
        CheckSegundoPiso.setText("Segundo Piso");
        CheckSegundoPiso.setOpaque(false);
        CheckSegundoPiso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckSegundoPisoActionPerformed(evt);
            }
        });
        getContentPane().add(CheckSegundoPiso, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 270, -1, -1));

        BtnVisualizarSectorPiso.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        BtnVisualizarSectorPiso.setText("Visualizar Sector por Piso");
        BtnVisualizarSectorPiso.setEnabled(false);
        getContentPane().add(BtnVisualizarSectorPiso, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 320, -1, -1));

        BtnTotalizarSector.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        BtnTotalizarSector.setText("Totalizar por Sector");
        BtnTotalizarSector.setMaximumSize(new java.awt.Dimension(179, 31));
        BtnTotalizarSector.setMinimumSize(new java.awt.Dimension(179, 31));
        BtnTotalizarSector.setPreferredSize(new java.awt.Dimension(179, 31));
        BtnTotalizarSector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTotalizarSectorActionPerformed(evt);
            }
        });
        getContentPane().add(BtnTotalizarSector, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 430, 197, -1));

        BtnTotalizarPiso.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        BtnTotalizarPiso.setText("Totalizar por Piso");
        BtnTotalizarPiso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTotalizarPisoActionPerformed(evt);
            }
        });
        getContentPane().add(BtnTotalizarPiso, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 430, 197, -1));

        BtnSalir.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        BtnSalir.setText("Salir");
        BtnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(BtnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 430, 197, -1));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("de Pedido");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 510, 61));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Periodo inicial");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 180, -1));

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Periodo final");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 200, -1));

        jLabel6.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Estados del pedido");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, -1, -1));

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Pisos");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 160, -1, -1));

        jLabel7.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Reportes en tiempos");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 510, 61));
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, 40, 40));
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, 50, 40));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FONDO.jpeg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CheckListoParaServirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckListoParaServirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckListoParaServirActionPerformed

    private void CheckNotificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckNotificadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckNotificadoActionPerformed

    private void CheckEntregadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckEntregadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckEntregadoActionPerformed

    private void CheckPendientePreparacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckPendientePreparacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckPendientePreparacionActionPerformed

    private void CheckCanceladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckCanceladoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckCanceladoActionPerformed

    private void CheckSegundoPisoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckSegundoPisoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckSegundoPisoActionPerformed

    private void CheckEnPreparacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckEnPreparacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckEnPreparacionActionPerformed

    private void BtnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSalirActionPerformed
         if (JOptionPane.showConfirmDialog(rootPane, "¿Desea realmente salir de la Generación de Reportes?",
                "Salir de la generación de Reportes", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            System.exit(0);
        
        
       //dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnSalirActionPerformed

    private void CheckPlantaBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckPlantaBajaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckPlantaBajaActionPerformed

    private void CheckPrimerPisoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckPrimerPisoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckPrimerPisoActionPerformed

    private void BtnTotalizarSectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTotalizarSectorActionPerformed
                
                String PeriodoInicial = TxtFechaInicio.getText();
                String PeriodoFinal = TxtFechaFin.getText();
                
                if (PeriodoInicial.equals("") || PeriodoFinal.equals("") ){
                    javax.swing.JOptionPane mensaje = new javax.swing.JOptionPane();
                mensaje.showMessageDialog(null, "Falta ingresar alguna fecha", "Error al ingresar fecha", mensaje.ERROR_MESSAGE);
                } else {
                    Date datePeriodoInicial = Utils.parseDate(PeriodoInicial);
                    Date datePeriodoFinal = Utils.parseDate(PeriodoFinal);

                    if (!(datePeriodoInicial.after(datePeriodoFinal)))
                    {
                        if (CheckPlantaBaja.isSelected() || CheckPrimerPiso.isSelected() || CheckSegundoPiso.isSelected()){
                            
                            GestorReportesDeTiemposEnPedido gestor = new GestorReportesDeTiemposEnPedido();

                            ArrayList<Estado> states = new ArrayList<Estado>();

                            //Creating Pedido's states
                            Estado estadoCreado = new Estado();
                            estadoCreado.setAmbito("PEDIDO");
                            estadoCreado.setNombreEstadoPedido("CREADO");

                            states.add(estadoCreado);

                            Estado estadoCancelado = new Estado();
                            if (CheckCancelado.isSelected()){
                                estadoCancelado.setAmbito("PEDIDO");
                                estadoCancelado.setNombreEstadoPedido("CANCELADO");

                                states.add(estadoCancelado);
                            }

                            Estado estadoNotificado = new Estado();
                            if (CheckCancelado.isSelected()){
                                estadoNotificado.setAmbito("PEDIDO");
                                estadoNotificado.setNombreEstadoPedido("NOTIFICADO");

                                states.add(estadoNotificado);
                            }

                            Estado estadoEntregado = new Estado();
                            if (CheckEntregado.isSelected()){
                                estadoEntregado.setAmbito("PEDIDO");
                                estadoEntregado.setNombreEstadoPedido("ENTREGADO");

                                states.add(estadoEntregado);
                            }

                            Estado estadoPendiente = new Estado();
                            if (CheckPendientePreparacion.isSelected()){
                                estadoPendiente.setAmbito("PEDIDO");
                                estadoPendiente.setNombreEstadoPedido("PENDIENTE_PREPARACION");

                                states.add(estadoPendiente);   
                            }
                            Estado estadoEnPreparacion = new Estado();
                            if (CheckEnPreparacion.isSelected()){
                                estadoEnPreparacion.setAmbito("PEDIDO");
                                estadoEnPreparacion.setNombreEstadoPedido("EN_PREPARACION");

                                states.add(estadoEnPreparacion);
                            }

                            Estado estadoListoParaServir = new Estado();
                            if (CheckListoParaServir.isSelected()){
                                estadoListoParaServir.setAmbito("PEDIDO");
                                estadoListoParaServir.setNombreEstadoPedido("LISTO_PARA_SERVIR");

                                states.add(estadoListoParaServir);
                            }

                            //"ABIERTA", "ACTIVA", "OCUPADA", "RESERVADA"
                            //Adding Mesa's states
                            ArrayList<Estado> mesaStates = new ArrayList<Estado>();

                            Estado estadoAbierta = new Estado();
                            estadoAbierta.setAmbito("MESA");
                            estadoAbierta.setNombreEstadoMesa("ABIERTA");

                            mesaStates.add(estadoAbierta);

                            Estado estadoActiva = new Estado();
                            estadoActiva.setAmbito("MESA");
                            estadoActiva.setNombreEstadoMesa("ACTIVA");

                            mesaStates.add(estadoActiva);

                            Estado estadoOcupada = new Estado();
                            estadoOcupada.setAmbito("MESA");
                            estadoOcupada.setNombreEstadoMesa("OCUPADA");

                            mesaStates.add(estadoOcupada);

                            Estado estadoReservada = new Estado();
                            estadoReservada.setAmbito("MESA");
                            estadoReservada.setNombreEstadoMesa("RESERVADA");

                            mesaStates.add(estadoReservada);

                            //Creating Facturas
                            ArrayList<Factura> facturas = new ArrayList<Factura>();

                            try {

                                    Calendar myDate = new GregorianCalendar();
                                    String fechaString = "10/10/2020 20:00:00";
                                    Date fechaDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.ENGLISH).parse(fechaString);
                                    myDate.setTime(fechaDate);

                                    Factura factura1 = new Factura(myDate.getTime(), 1);
                                    facturas.add(factura1);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura2 = new Factura(myDate.getTime(), 2);
                                    facturas.add(factura2);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura3 = new Factura(myDate.getTime(), 3);
                                    facturas.add(factura3);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura4 = new Factura(myDate.getTime(), 4);
                                    facturas.add(factura4);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura5 = new Factura(myDate.getTime(), 5);
                                    facturas.add(factura5);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura6 = new Factura(myDate.getTime(), 6);
                                    facturas.add(factura6);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura7 = new Factura(myDate.getTime(), 7);
                                    facturas.add(factura7);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura8 = new Factura(myDate.getTime(), 8);
                                    facturas.add(factura8);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura9 = new Factura(myDate.getTime(), 9);
                                    facturas.add(factura9);

                                    myDate.add(Calendar.MINUTE, 5);
                                    Factura factura10 = new Factura(myDate.getTime(), 10);
                                    facturas.add(factura10);

                            } catch (ParseException e) {
                                    // TODO Auto-generated catch block
                                    System.out.println("An error ocurred when Facturas were been created - " + e);
                            }

                            //Creating Historial Estados

                            Calendar myDate = new GregorianCalendar();

                            String fechaInicio = "19/11/2020 20:00:00";
                            Date fechaDateInicio;

                            Pedido pedido1 = null;
                            Pedido pedido2 = null;;
                            Pedido pedido3 = null;;
                            Pedido pedido4 = null;;
                            Pedido pedido5 = null;;

                            try {

                                    //Pedido 1 - CREADO - PENDIENTE_PREPARACION - EN_PREPARACION - LISTO_PARA_SERVIR

                                    fechaDateInicio = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.ENGLISH).parse(fechaInicio);
                                    myDate.setTime(fechaDateInicio);

                                    pedido1 = new Pedido(5, myDate.getTime(), 1, facturas.get(0));			

                                    myDate.add(Calendar.MINUTE, 40);
                                    HistorialEstado historial1Pedido1 = new HistorialEstado(fechaDateInicio, myDate.getTime(), estadoCreado);

                                    pedido1.addHistorial(historial1Pedido1);

                                    fechaDateInicio = myDate.getTime();
                                    myDate.setTime(fechaDateInicio);
                                    myDate.add(Calendar.MINUTE, 25);
                                    HistorialEstado historial2Pedido1 = new HistorialEstado(fechaDateInicio, myDate.getTime(), estadoPendiente);

                                    pedido1.addHistorial(historial2Pedido1);

                                    fechaDateInicio = myDate.getTime();
                                    myDate.setTime(fechaDateInicio);
                                    myDate.add(Calendar.MINUTE, 31);
                                    HistorialEstado historial3Pedido1 = new HistorialEstado(fechaDateInicio, myDate.getTime(), estadoEnPreparacion);

                                    pedido1.addHistorial(historial3Pedido1);

                                    fechaDateInicio = myDate.getTime();
                                    myDate.setTime(fechaDateInicio);
                                    HistorialEstado historial4Pedido1 = new HistorialEstado(fechaDateInicio, estadoListoParaServir);

                                    pedido1.addHistorial(historial4Pedido1);

                                    //Pedido 2 - CREADO - PENDIENTE_PREPARACION
                                    fechaInicio = "20/11/2020 21:00:00";
                                    fechaDateInicio = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.ENGLISH).parse(fechaInicio);
                                    myDate.setTime(fechaDateInicio);

                                    pedido2 = new Pedido(3, myDate.getTime(), 2, facturas.get(1));

                                    myDate.add(Calendar.MINUTE, 40);
                                    HistorialEstado historial1Pedido2 = new HistorialEstado(fechaDateInicio, myDate.getTime(), estadoCreado);

                                    pedido2.addHistorial(historial1Pedido2);

                                    fechaDateInicio = myDate.getTime();
                                    myDate.setTime(fechaDateInicio);
                                    HistorialEstado historial2Pedido2 = new HistorialEstado(fechaDateInicio, estadoPendiente);

                                    pedido2.addHistorial(historial2Pedido2);

                                    //Pedido 3 - CREADO - PENDIENTE_PREPARACION - EN_PREPARACION
                                    fechaInicio = "19/11/2020 21:00:00";
                                    fechaDateInicio = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.ENGLISH).parse(fechaInicio);
                                    myDate.setTime(fechaDateInicio);

                                    pedido3 = new Pedido(2, myDate.getTime(), 3, facturas.get(2));

                                    myDate.add(Calendar.MINUTE, 27);
                                    HistorialEstado historial1Pedido3 = new HistorialEstado(fechaDateInicio, myDate.getTime(), estadoCreado);

                                    pedido3.addHistorial(historial1Pedido3);

                                    fechaDateInicio = myDate.getTime();
                                    myDate.setTime(fechaDateInicio);
                                    myDate.add(Calendar.MINUTE, 13);
                                    HistorialEstado historial2Pedido3 = new HistorialEstado(fechaDateInicio, myDate.getTime(), estadoPendiente);

                                    pedido3.addHistorial(historial2Pedido3);

                                    fechaDateInicio = myDate.getTime();
                                    myDate.setTime(fechaDateInicio);
                                    HistorialEstado historial3Pedido3 = new HistorialEstado(fechaDateInicio, estadoEnPreparacion);

                                    pedido3.addHistorial(historial3Pedido3);

                                    //Pedido 4 - CREADO
                                    fechaInicio = "23/11/2020 21:30:00";
                                    fechaDateInicio = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.ENGLISH).parse(fechaInicio);
                                    myDate.setTime(fechaDateInicio);

                                    pedido4 = new Pedido(5, myDate.getTime(), 4, facturas.get(3));

                                    HistorialEstado historial1Pedido4 = new HistorialEstado(fechaDateInicio, estadoCreado);

                                    pedido4.addHistorial(historial1Pedido4);

                                    //Pedido 5 - CREADO - CANCELADO
                                    fechaInicio = "24/11/2020 21:00:00";
                                    fechaDateInicio = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.ENGLISH).parse(fechaInicio);
                                    myDate.setTime(fechaDateInicio);			

                                    pedido5 = new Pedido(3, myDate.getTime(), 5, facturas.get(4));

                                    myDate.add(Calendar.MINUTE, 27);
                                    HistorialEstado historial1Pedido5 = new HistorialEstado(fechaDateInicio, myDate.getTime(), estadoCreado);

                                    pedido5.addHistorial(historial1Pedido5);

                                    fechaDateInicio = myDate.getTime();
                                    myDate.setTime(fechaDateInicio);
                                    myDate.add(Calendar.MINUTE, 10);
                                    HistorialEstado historial2Pedido5 = new HistorialEstado(fechaDateInicio, myDate.getTime(), estadoCancelado);

                                    pedido5.addHistorial(historial2Pedido5);		

                            } catch (ParseException e) {
                                    System.out.println("An error ocurred creating Pedidos - Error: " + e);
                            }

                            //Creating Mesas
                            ArrayList<Mesa> mesas = new ArrayList<Mesa>();

                            Mesa mesa1 = new Mesa(10, 30.0, 1, 1, 1, estadoOcupada, pedido1);
                            mesas.add(mesa1);
                            Mesa mesa2 = new Mesa(7, 22.0, 1, 2, 1, estadoOcupada, pedido2);
                            mesas.add(mesa2);
                            Mesa mesa3 = new Mesa(8, 24.0, 1, 3, 1, estadoActiva);
                            mesas.add(mesa3);
                            Mesa mesa4 = new Mesa(8, 24.0, 2, 4, 1, estadoOcupada, pedido3);
                            mesas.add(mesa4);
                            Mesa mesa5 = new Mesa(5, 15.0, 2, 5, 1, estadoActiva);
                            mesas.add(mesa5);
                            Mesa mesa6 = new Mesa(6, 18.0, 2, 6, 1, estadoReservada);
                            mesas.add(mesa6);
                            Mesa mesa7 = new Mesa(9, 27.0, 3, 7, 1, estadoOcupada, pedido4);
                            mesas.add(mesa7);
                            Mesa mesa8 = new Mesa(6, 18.0, 3, 8, 1, estadoActiva);
                            mesas.add(mesa8);
                            Mesa mesa9 = new Mesa(7, 21.0, 3, 9, 1, estadoOcupada, pedido5);
                            mesas.add(mesa9);
                            Mesa mesa10 = new Mesa(8, 24.0, 3, 10, 1, estadoReservada);
                            mesas.add(mesa10);

                            //Creating Secciones
                            ArrayList<Seccion> secciones1Piso1 = new ArrayList<Seccion>();
                            ArrayList<Seccion> secciones2Piso1 = new ArrayList<Seccion>();
                            ArrayList<Seccion> secciones1Piso2 = new ArrayList<Seccion>();
                            ArrayList<Seccion> secciones2Piso2 = new ArrayList<Seccion>();
                            ArrayList<Seccion> secciones1Piso3 = new ArrayList<Seccion>();
                            ArrayList<Seccion> secciones2Piso3 = new ArrayList<Seccion>();

                            Seccion seccion1 = new Seccion(2.0, 3.0, "Seccion 1 - Piso 1", mesa1);
                            secciones1Piso1.add(seccion1);
                            Seccion seccion2 = new Seccion(4.0, 6.0, "Seccion 2 - Piso 1", mesa2);
                            secciones1Piso1.add(seccion2);
                            Seccion seccion3 = new Seccion(8.0, 12.0, "Seccion 3 - Piso 1", mesa3);
                            secciones2Piso1.add(seccion3);
                            Seccion seccion4 = new Seccion(2.0, 3.0, "Seccion 1 - Piso 2", mesa4);
                            secciones1Piso2.add(seccion4);
                            Seccion seccion5 = new Seccion(4.0, 6.0, "Seccion 2 - Piso 2", mesa5);
                            secciones1Piso2.add(seccion5);
                            Seccion seccion6 = new Seccion(8.0, 12.0, "Seccion 3 - Piso 2", mesa6);
                            secciones2Piso2.add(seccion6);
                            Seccion seccion7 = new Seccion(2.0, 3.0, "Seccion 1 - Piso 3", mesa7);
                            secciones1Piso3.add(seccion7);
                            Seccion seccion8 = new Seccion(4.0, 6.0, "Seccion 2 - Piso 3", mesa8);
                            secciones1Piso3.add(seccion8);
                            Seccion seccion9 = new Seccion(8.0, 12.0, "Seccion 3 - Piso 3", mesa9);
                            secciones2Piso3.add(seccion9);
                            Seccion seccion10 = new Seccion(2.0, 3.0, "Seccion 4 - Piso 3", mesa10);
                            secciones2Piso3.add(seccion10);

                            //Creating Sectores
                            ArrayList<Sector> sectores = new ArrayList<Sector>();
                            ArrayList<Sector> sectoresPiso1 = new ArrayList<Sector>();
                            ArrayList<Sector> sectoresPiso2 = new ArrayList<Sector>();
                            ArrayList<Sector> sectoresPiso3 = new ArrayList<Sector>();


                            Sector sector1 = new Sector("Sector 1 - Piso 1", 10.0, 10.0, "Cerca", "Cerca", secciones1Piso1);
                            sectoresPiso1.add(sector1);
                            sectores.add(sector1);
                            Sector sector2 = new Sector("Sector 2 - Piso 1", 12.0, 18.0, "Lejos", "Cerca", secciones2Piso1);
                            sectoresPiso1.add(sector2);
                            sectores.add(sector2);
                            Sector sector3 = new Sector("Sector 1 - Piso 2", 14.0, 12.0, "Cerca", "Lejos", secciones1Piso2);
                            sectoresPiso2.add(sector3);
                            sectores.add(sector3);
                            Sector sector4 = new Sector("Sector 2 - Piso 2", 12.0, 14.0, "Lejos", "Lejos", secciones2Piso2);
                            sectoresPiso2.add(sector4);
                            sectores.add(sector4);
                            Sector sector5 = new Sector("Sector 1 - Piso 3", 10.0, 14.0, "Cerca", "Cerca", secciones1Piso3);
                            sectoresPiso3.add(sector5);
                            sectores.add(sector5);
                            Sector sector6 = new Sector("Sector 2 - Piso 3", 13.0, 14.0, "Lejos", "Lejos", secciones2Piso3);
                            sectoresPiso3.add(sector6);
                            sectores.add(sector1);

                            //Creating Pisos
                            ArrayList<Piso> pisos = new ArrayList<Piso>();

                            Piso piso1 = new Piso(1, sectoresPiso1);
                            if (CheckPlantaBaja.isSelected()){
                                pisos.add(piso1);
                            }

                            Piso piso2 = new Piso(2, sectoresPiso2);
                            if (CheckPrimerPiso.isSelected()){
                                pisos.add(piso2);
                            }
                            Piso piso3 = new Piso(3, sectoresPiso3);
                            if (CheckSegundoPiso.isSelected()){
                                pisos.add(piso3);
                            }
                            //Setting period
                            gestor.setPeriodInitialDate(datePeriodoInicial);
                            gestor.setPeriodFinalDate(datePeriodoFinal);

                            //Adding pisosSelecc
                            gestor.addPisosSeleccionados(pisos);

                            //Adding sectoresSelecc
                            pisos.forEach(ePiso -> gestor.addSectoresSeleccionados(ePiso.getSectores()));

                            //Adding estadosSeleccionados
                            gestor.addEstadosSeleccionados(states);
                            
                            new Visualizar(gestor).setVisible(true);
                            this.setVisible (false);
                            
                        } else {
                            //System.out.println("No cargo correctamente los datos, reintente");
                            javax.swing.JOptionPane mensaje = new javax.swing.JOptionPane();
                            mensaje.showMessageDialog(null, "Debe seleccionar al menos 1 Piso.", "Error en la selección de pisos", mensaje.ERROR_MESSAGE);
                        }
                    } else {
                        //System.out.println("No cargo correctamente los datos, reintente");
                        javax.swing.JOptionPane mensaje = new javax.swing.JOptionPane();
                        mensaje.showMessageDialog(null, "La fecha ingresada no es válida", "Error al ingresar fecha", mensaje.ERROR_MESSAGE);
                    }
                }
                
                
                
    }//GEN-LAST:event_BtnTotalizarSectorActionPerformed

    private void TxtFechaFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtFechaFinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtFechaFinActionPerformed

    private void TxtFechaInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtFechaInicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtFechaInicioActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void BtnTotalizarPisoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTotalizarPisoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnTotalizarPisoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(reportesEnTiempoDePedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(reportesEnTiempoDePedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(reportesEnTiempoDePedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(reportesEnTiempoDePedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reportesEnTiempoDePedido().setVisible(true);
                              
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnSalir;
    private javax.swing.JButton BtnTotalizarPiso;
    private javax.swing.JButton BtnTotalizarSector;
    private javax.swing.JButton BtnVisualizarSectorPiso;
    private javax.swing.JCheckBox CheckCancelado;
    private javax.swing.JCheckBox CheckEnPreparacion;
    private javax.swing.JCheckBox CheckEntregado;
    private javax.swing.JCheckBox CheckListoParaServir;
    private javax.swing.JCheckBox CheckNotificado;
    private javax.swing.JCheckBox CheckPendientePreparacion;
    private javax.swing.JCheckBox CheckPlantaBaja;
    private javax.swing.JCheckBox CheckPrimerPiso;
    private javax.swing.JCheckBox CheckSegundoPiso;
    private javax.swing.JTextField TxtFechaFin;
    private javax.swing.JTextField TxtFechaInicio;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
